// <auto-generated />

using System;
using AudioBookPlayer.App.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace AudioBookPlayer.App.Data.Migrations
{
    [DbContext(typeof(SqLiteMediaLibraryDataContext))]
    public partial class StoryBlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .Entity("AudioBookPlayer.App.Data.Models.Book", b =>
                {
                    b.Property<int>(nameof(Book.Id)).ValueGeneratedOnAdd();
                    b.Property<string>(nameof(Book.Title)).IsRequired();
                    b.Property<string>(nameof(Book.Synopsis));
                    b.Property<bool>(nameof(Book.IsExcluded));
                    b.Property<DateTime>(nameof(Book.AddedToLibrary));

                    b.HasKey(nameof(Book.Id));
                    b.ToTable("books");

                    b.HasOne("AudioBookPlayer.App.Data.Models.SourceFile", "Author")
                        .WithMany("Addresses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                })
                .Entity("AudioBookPlayer.App.Data.Models.SourceFile", b =>
                {
                    b.Property<int>(nameof(SourceFile.Id)).ValueGeneratedOnAdd();
                    b.Property<int>(nameof(SourceFile.BookId)).IsRequired();
                    b.Property<string>(nameof(SourceFile.Filename));
                    b.Property<DateTime>(nameof(SourceFile.Created));
                    b.Property<DateTime>(nameof(SourceFile.Modified));
                    b.Property<long>(nameof(SourceFile.Length));

                    b.HasKey(nameof(SourceFile.Id));
                    b.HasIndex(nameof(SourceFile.BookId));
                    b.ToTable("sources");

                    b.HasOne("AudioBookPlayer.App.Data.Models.Book", nameof(SourceFile.Book))
                        .WithMany(nameof(Book.SourceFiles))
                        .HasForeignKey(nameof(SourceFile.BookId))
                        .OnDelete(DeleteBehavior.Cascade);
                });

            /*modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsPublic");

                    b.Property<DateTime?>("Modified");

                    b.Property<long?>("ParentId");

                    b.Property<int>("Status");

                    b.Property<long>("StoryId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StoryId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Featured", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("StoryId");

                    b.HasKey("Id");

                    b.HasIndex("StoryId")
                        .IsUnique();

                    b.ToTable("Featured");
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Rubric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<string>("Slug");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Rubrics");
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Story", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<bool>("IsCommentsClosed");

                    b.Property<bool>("IsPublic");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<DateTimeOffset?>("Published");

                    b.Property<string>("Slug");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Address", b =>
                {
                    b.HasOne("StoryBlog.Web.Services.Blog.Persistence.Models.Author", "Author")
                        .WithMany("Addresses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Comment", b =>
                {
                    b.HasOne("StoryBlog.Web.Services.Blog.Persistence.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoryBlog.Web.Services.Blog.Persistence.Models.Comment", "Parent")
                        .WithMany("Comments")
                        .HasForeignKey("ParentId");

                    b.HasOne("StoryBlog.Web.Services.Blog.Persistence.Models.Story", "Story")
                        .WithMany("Comments")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Featured", b =>
                {
                    b.HasOne("StoryBlog.Web.Services.Blog.Persistence.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StoryBlog.Web.Services.Blog.Persistence.Models.Story", b =>
                {
                    b.HasOne("StoryBlog.Web.Services.Blog.Persistence.Models.Author", "Author")
                        .WithMany("Stories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });*/
#pragma warning restore 612, 618
        }
    }
}
