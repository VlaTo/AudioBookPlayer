<?xml version="1.0" encoding="UTF-8"?>
<Shell
    xmlns="http://xamarin.com/schemas/2014/forms" 
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:local="clr-namespace:AudioBookPlayer.App.Views"
    xmlns:res="clr-namespace:AudioBookPlayer.App.Resources"
    xmlns:interactivity="clr-namespace:LibraProgramming.Xamarin.Interactivity.Behaviors;assembly=LibraProgramming.Xamarin.Interactivity"
    Title="AudioBookPlayer.App"
    x:Class="AudioBookPlayer.App.AppShell">
    <Shell.Behaviors>
        <interactivity:MultiTapToExitBehavior
            TapCount="2"
            Timeout="0:00:3.0"
            ShowHintMessage="OnMultiTapToExitBehaviorOnShowHintMessage"
        />
    </Shell.Behaviors>

    <!--
        The overall app visual hierarchy is defined here, along with navigation.
    
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->

    <Shell.Resources>
        <ResourceDictionary>
            <Color x:Key="LightShellTabBarTitleColor">White</Color>
            <Color x:Key="LightShellForegroundColor">White</Color>
            <Color x:Key="LightShellBackgroundColor">White</Color>

            <Color x:Key="DarkShellTabBarTitleColor">Gray</Color>
            <Color x:Key="DarkShellForegroundColor">White</Color>
            <Color x:Key="DarkShellBackgroundColor">#2A2A2A</Color>

            <Style
                x:Key="BaseStyle"
                TargetType="Element">
                <Setter
                    Property="Shell.BackgroundColor"
                    Value="{AppThemeBinding Light={StaticResource LightShellBackgroundColor}, Dark={StaticResource DarkShellBackgroundColor}}"
                />
                <Setter
                    Property="Shell.ForegroundColor"
                    Value="{AppThemeBinding Light={StaticResource LightShellForegroundColor}, Dark={StaticResource DarkShellForegroundColor}}"
                />
                <Setter
                    Property="Shell.FlyoutBackgroundColor"
                    Value="{AppThemeBinding Light={StaticResource LightShellBackgroundColor}, Dark={StaticResource DarkShellBackgroundColor}}"
                />
                <Setter Property="Shell.TitleColor" Value="White" />
                <Setter Property="Shell.DisabledColor" Value="#B4FFFFFF" />
                <Setter Property="Shell.UnselectedColor" Value="#95FFFFFF" />
                <Setter 
                    Property="Shell.TabBarBackgroundColor" 
                    Value="{AppThemeBinding Light={StaticResource LightNavigationPageBarBackgroundColor}, Dark={StaticResource DarkNavigationPageBarBackgroundColor}}"
                />
                <Setter Property="Shell.TabBarForegroundColor" Value="White"/>
                <Setter Property="Shell.TabBarUnselectedColor" Value="#95FFFFFF"/>
                <Setter
                    Property="Shell.TabBarTitleColor"
                    Value="{AppThemeBinding Light={StaticResource LightShellTabBarTitleColor}, Dark={StaticResource DarkShellTabBarTitleColor}}"
                />
            </Style>

            <Style 
                TargetType="TabBar"
                BasedOn="{StaticResource BaseStyle}">
                
            </Style>

            <Style 
                TargetType="FlyoutItem"
                BasedOn="{StaticResource BaseStyle}">
                
            </Style>

            <!--
            Default Styles for all Flyout Items
            https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
            -->
            <Style
                Class="FlyoutItemLabelStyle"
                TargetType="Label">
                <Setter Property="TextColor" Value="White"></Setter>
            </Style>
            
            <Style
                Class="FlyoutItemLayoutStyle"
                TargetType="Layout"
                ApplyToDerivedTypes="True">
                <Setter
                    Property="BackgroundColor"
                    Value="{AppThemeBinding Light={StaticResource LightShellBackgroundColor}, Dark={StaticResource DarkShellBackgroundColor}}"
                />
                <Setter
                    Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter
                                        Property="BackgroundColor"
                                        Value="{AppThemeBinding Light={StaticResource LightShellBackgroundColor}, Dark={StaticResource DarkShellBackgroundColor}}"
                                    />
                                    <Setter
                                        TargetName="FlyoutItemLabel"
                                        Property="Label.TextColor"
                                        Value="{AppThemeBinding Light={StaticResource LightPrimaryTextColor}, Dark={StaticResource DarkPrimaryTextColor}}"
                                    />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Selected">
                                <VisualState.Setters>
                                    <Setter
                                        Property="BackgroundColor"
                                        Value="{AppThemeBinding Light={StaticResource LightPrimaryColor}, Dark={StaticResource DarkPrimaryColor}}"
                                    />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <!--
            Custom Style you can apply to any Flyout Item
            -->
            <Style
                Class="MenuItemLayoutStyle"
                TargetType="Layout"
                ApplyToDerivedTypes="True">
                <Setter
                    Property="BackgroundColor"
                    Value="{AppThemeBinding Light={StaticResource LightShellBackgroundColor}, Dark={StaticResource DarkShellBackgroundColor}}"
                />
                <Setter
                    Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter
                                        TargetName="FlyoutItemLabel"
                                        Property="Label.TextColor"
                                        Value="{AppThemeBinding Light={StaticResource LightPrimaryTextColor}, Dark={StaticResource DarkPrimaryTextColor}}"
                                    />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>
            
        </ResourceDictionary>
    </Shell.Resources>
    
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid
                BackgroundColor="{AppThemeBinding Light={StaticResource LightContentPageBackgroundColor}, Dark={StaticResource DarkContentPageBackgroundColor}}">
                <Image
                    HeightRequest="240"
                />
                <Label
                    FontSize="Large"
                    Text="{Static res:AppResources.ShellHeaderTitle}"
                    VerticalOptions="End"
                    HorizontalOptions="End"
                    Margin="8,8,16,16"
                />
            </Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->
    
    <!--<FlyoutItem
        Title="Library"
        Icon="icon_about.png">
        <Tab
            Title="Books"
            Route="Books"
            FlyoutDisplayOptions="AsMultipleItems">
            <ShellContent
                Route="Recent"
                Title="Recent"
                ContentTemplate="{DataTemplate local:RecentBooksPage}"
            />
            <ShellContent
                Route="All"
                Title="All"
                ContentTemplate="{DataTemplate local:AllBooksPage}"
            />
        </Tab>
    </FlyoutItem>-->
    
    <FlyoutItem
        Title="{Static res:AppResources.ShellMenuLibraryItem}"
        Icon="icon_feed.png">
        <ShellContent
            Route="LibraryPage"
            ContentTemplate="{DataTemplate local:LibraryPage}"
        />
    </FlyoutItem>
    <FlyoutItem
        Title="{Static res:AppResources.ShellMenuSettingItem}"
        Icon="icon_feed.png">
        <ShellContent
            Route="SettingsPage"
            ContentTemplate="{DataTemplate local:SettingsPage}"
        />
    </FlyoutItem>
    <FlyoutItem
        Title="{Static res:AppResources.ShellMenuAboutItem}"
        Icon="icon_about.png">
        <ShellContent
            Route="AboutPage"
            ContentTemplate="{DataTemplate local:AboutPage}"
        />
    </FlyoutItem>

    <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
    <MenuItem
        StyleClass="MenuItemLayoutStyle"
        Clicked="OnMenuItemClicked"
        Text="Logout">
    </MenuItem>

    <!--
        TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where 
        you don't want users to be able to navigate away from. If you would like to navigate to this 
        content you can do so by calling 
        await Shell.Current.GoToAsync("//LoginPage");
    -->
    <TabBar>
        <ShellContent
            Route="LoginPage" 
            ContentTemplate="{DataTemplate local:LoginPage}"
        />
    </TabBar>

    <!--<NavigationPage>
        <ShellContent
            Route="{Static routes:Routes.PlayerPageRoute}"
            ContentTemplate="{DataTemplate local:PlayerControlPage}"
        />
    </NavigationPage>-->

    <!-- Optional Templates 
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

    -->

</Shell>
